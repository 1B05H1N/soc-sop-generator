"""
Unified Configuration Management System

This module provides a comprehensive configuration management system
for the SOC SOP Generator with user preferences, templates, and settings.
"""

import json
import os
from pathlib import Path
from typing import Dict, Any, Optional, List
from dataclasses import dataclass, asdict
from datetime import datetime


@dataclass
class UserPreferences:
    """User preferences for SOP generation"""
    default_output_format: str = "markdown"
    default_output_directory: str = "output/generated_sops"
    enable_validation: bool = True
    enable_fallback: bool = True
    enable_streaming: bool = False
    max_rules_per_batch: int = 100
    preferred_template_style: str = "modern"
    include_mitre_mapping: bool = True
    include_technical_details: bool = True
    include_escalation_criteria: bool = True
    auto_save_validation_reports: bool = False
    preferred_pdf_style: str = "professional"
    enable_progress_indicators: bool = True
    log_level: str = "INFO"
    backup_generated_files: bool = True
    max_backup_files: int = 10


@dataclass
class TemplateSettings:
    """Template customization settings"""
    author: str = "[Configure in settings]"
    contact_email: str = "[Configure in settings]"
    github_url: str = "[Configure in settings]"
    organization: str = "Security Operations Center"
    company_name: str = "Security Operations Center"
    department_name: str = "SOC"
    emergency_contact: str = "[Configure in settings]"
    escalation_procedure: str = "Follow standard escalation matrix"
    incident_response_team: str = "IRT"
    primary_timezone: str = "UTC"
    document_classification: str = "Internal Use Only"
    review_frequency: str = "Quarterly"
    sop_version_format: str = "1.0"
    include_disclaimer: bool = True
    disclaimer_text: str = "This document is for internal use only."
    include_footer: bool = True
    footer_text: str = "Generated by SOC SOP Generator"
    version: str = "1.0.0"
    last_updated: str = "2025-07-20"


@dataclass
class AdvancedSettings:
    """Advanced configuration settings"""
    mitre_attack_version: str = "14.1"
    confidence_threshold: float = 0.7
    max_complexity_score: int = 20
    enable_ai_enhancement: bool = False
    ai_model_preference: str = "gpt-4"
    enable_rule_optimization: bool = False
    optimization_algorithm: str = "genetic"
    enable_auto_categorization: bool = True
    categorization_confidence: float = 0.8
    enable_duplicate_detection: bool = True
    similarity_threshold: float = 0.9
    enable_performance_monitoring: bool = False
    performance_log_interval: int = 60
    enable_auto_backup: bool = True
    backup_interval_hours: int = 24


class UnifiedConfig:
    """Unified configuration management for the SOC SOP Generator"""
    
    def __init__(self, config_file: str = ".soc_sop_config.json"):
        self.config_file = Path(config_file)
        self.user_preferences = UserPreferences()
        self.template_settings = TemplateSettings()
        self.advanced_settings = AdvancedSettings()
        self.load_configuration()
    
    def _load_config(self) -> Dict[str, Any]:
        """Load configuration from file or environment variables"""
        config = {
            "user_preferences": asdict(self.user_preferences),
            "template_settings": asdict(self.template_settings),
            "advanced_settings": asdict(self.advanced_settings)
        }
        
        # Load from environment variables first (highest priority)
        env_config = {
            "template_settings.author": os.getenv("SOP_AUTHOR"),
            "template_settings.contact_email": os.getenv("SOP_CONTACT_EMAIL"),
            "template_settings.github_url": os.getenv("SOP_GITHUB_URL"),
            "template_settings.organization": os.getenv("SOP_ORGANIZATION")
        }
        
        # Update config with environment variables (only if they exist)
        for key, value in env_config.items():
            if value:
                category, setting = key.split('.', 1)
                config[category][setting] = value
        
        # Load from config file (if exists)
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r') as f:
                    file_config = json.load(f)
                    # Merge file config with current config
                    for category in config:
                        if category in file_config:
                            config[category].update(file_config[category])
            except (json.JSONDecodeError, IOError) as e:
                print(f"Warning: Could not load config file: {e}")
        
        return config
    
    def load_configuration(self) -> None:
        """Load configuration from file"""
        config_data = self._load_config()
        
        # Update user preferences
        for key, value in config_data.get('user_preferences', {}).items():
            if hasattr(self.user_preferences, key):
                setattr(self.user_preferences, key, value)
        
        # Update template settings
        for key, value in config_data.get('template_settings', {}).items():
            if hasattr(self.template_settings, key):
                setattr(self.template_settings, key, value)
        
        # Update advanced settings
        for key, value in config_data.get('advanced_settings', {}).items():
            if hasattr(self.advanced_settings, key):
                setattr(self.advanced_settings, key, value)
    
    def save_configuration(self) -> None:
        """Save current configuration to file"""
        config_data = {
            "user_preferences": asdict(self.user_preferences),
            "template_settings": asdict(self.template_settings),
            "advanced_settings": asdict(self.advanced_settings),
            "_comment": "Configuration file for SOC SOP Generator"
        }
        
        self.config_file.parent.mkdir(parents=True, exist_ok=True)
        with open(self.config_file, 'w') as f:
            json.dump(config_data, f, indent=2)
    
    def get(self, key: str, default: Any = None) -> Any:
        """Get a configuration value using dot notation (e.g., 'template_settings.author')"""
        if '.' in key:
            category, setting = key.split('.', 1)
            if category == 'user_preferences':
                return getattr(self.user_preferences, setting, default)
            elif category == 'template_settings':
                return getattr(self.template_settings, setting, default)
            elif category == 'advanced_settings':
                return getattr(self.advanced_settings, setting, default)
        return default
    
    def set(self, key: str, value: Any) -> None:
        """Set a configuration value using dot notation"""
        if '.' in key:
            category, setting = key.split('.', 1)
            if category == 'user_preferences':
                if hasattr(self.user_preferences, setting):
                    setattr(self.user_preferences, setting, value)
            elif category == 'template_settings':
                if hasattr(self.template_settings, setting):
                    setattr(self.template_settings, setting, value)
            elif category == 'advanced_settings':
                if hasattr(self.advanced_settings, setting):
                    setattr(self.advanced_settings, setting, value)
    
    def update_user_preferences(self, **kwargs) -> None:
        """Update user preferences"""
        for key, value in kwargs.items():
            if hasattr(self.user_preferences, key):
                setattr(self.user_preferences, key, value)
    
    def update_template_settings(self, **kwargs) -> None:
        """Update template settings"""
        for key, value in kwargs.items():
            if hasattr(self.template_settings, key):
                setattr(self.template_settings, key, value)
    
    def update_advanced_settings(self, **kwargs) -> None:
        """Update advanced settings"""
        for key, value in kwargs.items():
            if hasattr(self.advanced_settings, key):
                setattr(self.advanced_settings, key, value)
    
    def get_author(self) -> str:
        """Get the configured author name"""
        return self.get("template_settings.author", "[Configure in settings]")
    
    def get_contact_email(self) -> str:
        """Get the configured contact email"""
        return self.get("template_settings.contact_email", "[Configure in settings]")
    
    def get_github_url(self) -> str:
        """Get the configured GitHub URL"""
        return self.get("template_settings.github_url", "[Configure in settings]")
    
    def get_organization(self) -> str:
        """Get the configured organization name"""
        return self.get("template_settings.organization", "Security Operations Center")
    
    def get_version(self) -> str:
        """Get the current version"""
        return self.get("template_settings.version", "1.0.0")
    
    def get_last_updated(self) -> str:
        """Get the last updated date"""
        return self.get("template_settings.last_updated", "2025-07-20")
    
    def create_config_template(self, output_file: str = ".soc_sop_config.json") -> str:
        """Create a template configuration file"""
        template = {
            "user_preferences": asdict(UserPreferences()),
            "template_settings": asdict(TemplateSettings()),
            "advanced_settings": asdict(AdvancedSettings()),
            "_comment": "This file allows you to customize settings used in generated SOPs"
        }
        
        with open(output_file, 'w') as f:
            json.dump(template, f, indent=2)
        
        return output_file
    
    def export_configuration(self, output_file: str) -> None:
        """Export configuration to file"""
        config_data = {
            "user_preferences": asdict(self.user_preferences),
            "template_settings": asdict(self.template_settings),
            "advanced_settings": asdict(self.advanced_settings),
            "exported_at": datetime.now().isoformat()
        }
        
        with open(output_file, 'w') as f:
            json.dump(config_data, f, indent=2)
    
    def import_configuration(self, input_file: str) -> None:
        """Import configuration from file"""
        if Path(input_file).exists():
            try:
                with open(input_file, 'r') as f:
                    data = json.load(f)
                
                # Update user preferences
                if 'user_preferences' in data:
                    for key, value in data['user_preferences'].items():
                        if hasattr(self.user_preferences, key):
                            setattr(self.user_preferences, key, value)
                
                # Update template settings
                if 'template_settings' in data:
                    for key, value in data['template_settings'].items():
                        if hasattr(self.template_settings, key):
                            setattr(self.template_settings, key, value)
                
                # Update advanced settings
                if 'advanced_settings' in data:
                    for key, value in data['advanced_settings'].items():
                        if hasattr(self.advanced_settings, key):
                            setattr(self.advanced_settings, key, value)
                
                self.save_configuration()
            except (json.JSONDecodeError, IOError) as e:
                raise ValueError(f"Could not import configuration: {e}")
    
    def reset_to_defaults(self) -> None:
        """Reset all settings to defaults"""
        self.user_preferences = UserPreferences()
        self.template_settings = TemplateSettings()
        self.advanced_settings = AdvancedSettings()
        self.save_configuration()
    
    def get_configuration_summary(self) -> Dict[str, Any]:
        """Get a summary of current configuration"""
        return {
            "user_preferences": asdict(self.user_preferences),
            "template_settings": asdict(self.template_settings),
            "advanced_settings": asdict(self.advanced_settings),
            "config_file": str(self.config_file),
            "config_file_exists": self.config_file.exists()
        }
    
    def validate_configuration(self) -> List[str]:
        """Validate current configuration and return list of issues"""
        issues = []
        
        # Check required template settings
        if self.template_settings.author == "[Configure in settings]":
            issues.append("Author not configured")
        if self.template_settings.contact_email == "[Configure in settings]":
            issues.append("Contact email not configured")
        
        # Check user preferences
        if self.user_preferences.max_rules_per_batch <= 0:
            issues.append("Max rules per batch must be positive")
        if self.user_preferences.max_backup_files <= 0:
            issues.append("Max backup files must be positive")
        
        # Check advanced settings
        if self.advanced_settings.confidence_threshold < 0 or self.advanced_settings.confidence_threshold > 1:
            issues.append("Confidence threshold must be between 0 and 1")
        if self.advanced_settings.similarity_threshold < 0 or self.advanced_settings.similarity_threshold > 1:
            issues.append("Similarity threshold must be between 0 and 1")
        
        return issues
    
    def print_config(self):
        """Print current configuration"""
        print("=== SOC SOP Generator Configuration ===")
        print(f"Config file: {self.config_file}")
        print(f"Config file exists: {self.config_file.exists()}")
        print("\n--- Template Settings ---")
        for key, value in asdict(self.template_settings).items():
            print(f"  {key}: {value}")
        print("\n--- User Preferences ---")
        for key, value in asdict(self.user_preferences).items():
            print(f"  {key}: {value}")
        print("\n--- Advanced Settings ---")
        for key, value in asdict(self.advanced_settings).items():
            print(f"  {key}: {value}")


# Global configuration instance
config = UnifiedConfig() 