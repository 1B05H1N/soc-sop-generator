"""
Configuration Management System

This module provides a comprehensive configuration management system
for the SOC SOP Generator with user preferences, templates, and settings.
"""

import json
import os
from pathlib import Path
from typing import Dict, Any, Optional, List
from dataclasses import dataclass, asdict
from datetime import datetime

from .config import config


@dataclass
class UserPreferences:
    """User preferences for SOP generation"""
    default_output_format: str = "markdown"
    default_output_directory: str = "output/generated_sops"
    enable_validation: bool = True
    enable_fallback: bool = True
    enable_streaming: bool = False
    max_rules_per_batch: int = 100
    preferred_template_style: str = "modern"
    include_mitre_mapping: bool = True
    include_technical_details: bool = True
    include_escalation_criteria: bool = True
    auto_save_validation_reports: bool = False
    preferred_pdf_style: str = "professional"
    enable_progress_indicators: bool = True
    log_level: str = "INFO"
    backup_generated_files: bool = True
    max_backup_files: int = 10


@dataclass
class TemplateSettings:
    """Template customization settings"""
    company_name: str = "Security Operations Center"
    department_name: str = "SOC"
    contact_email: str = "[Configure in settings]"
    emergency_contact: str = "[Configure in settings]"
    escalation_procedure: str = "Follow standard escalation matrix"
    incident_response_team: str = "IRT"
    primary_timezone: str = "UTC"
    document_classification: str = "Internal Use Only"
    review_frequency: str = "Quarterly"
    sop_version_format: str = "1.0"
    include_disclaimer: bool = True
    disclaimer_text: str = "This document is for internal use only."
    include_footer: bool = True
    footer_text: str = "Generated by SOC SOP Generator"


@dataclass
class AdvancedSettings:
    """Advanced configuration settings"""
    mitre_attack_version: str = "14.1"
    confidence_threshold: float = 0.7
    max_complexity_score: int = 20
    enable_ai_enhancement: bool = False
    ai_model_preference: str = "gpt-4"
    enable_rule_optimization: bool = False
    optimization_algorithm: str = "genetic"
    enable_auto_categorization: bool = True
    categorization_confidence: float = 0.8
    enable_duplicate_detection: bool = True
    similarity_threshold: float = 0.9
    enable_performance_monitoring: bool = False
    performance_log_interval: int = 60
    enable_auto_backup: bool = True
    backup_interval_hours: int = 24


class ConfigurationManager:
    """Manages configuration settings for the SOC SOP Generator"""
    
    def __init__(self, config_file: str = ".soc_sop_config.json"):
        self.config_file = Path(config_file)
        self.user_preferences = UserPreferences()
        self.template_settings = TemplateSettings()
        self.advanced_settings = AdvancedSettings()
        self.load_configuration()
    
    def load_configuration(self) -> None:
        """Load configuration from file"""
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r') as f:
                    data = json.load(f)
                
                # Load user preferences
                if 'user_preferences' in data:
                    for key, value in data['user_preferences'].items():
                        if hasattr(self.user_preferences, key):
                            setattr(self.user_preferences, key, value)
                
                # Load template settings
                if 'template_settings' in data:
                    for key, value in data['template_settings'].items():
                        if hasattr(self.template_settings, key):
                            setattr(self.template_settings, key, value)
                
                # Load advanced settings
                if 'advanced_settings' in data:
                    for key, value in data['advanced_settings'].items():
                        if hasattr(self.advanced_settings, key):
                            setattr(self.advanced_settings, key, value)
                            
            except Exception as e:
                print(f"Warning: Could not load configuration: {e}")
    
    def save_configuration(self) -> None:
        """Save configuration to file"""
        config_data = {
            'user_preferences': asdict(self.user_preferences),
            'template_settings': asdict(self.template_settings),
            'advanced_settings': asdict(self.advanced_settings),
            'last_updated': datetime.now().isoformat(),
            'version': '1.0'
        }
        
        try:
            with open(self.config_file, 'w') as f:
                json.dump(config_data, f, indent=2)
        except Exception as e:
            print(f"Error saving configuration: {e}")
    
    def update_user_preferences(self, **kwargs) -> None:
        """Update user preferences"""
        for key, value in kwargs.items():
            if hasattr(self.user_preferences, key):
                setattr(self.user_preferences, key, value)
        self.save_configuration()
    
    def update_template_settings(self, **kwargs) -> None:
        """Update template settings"""
        for key, value in kwargs.items():
            if hasattr(self.template_settings, key):
                setattr(self.template_settings, key, value)
        self.save_configuration()
    
    def update_advanced_settings(self, **kwargs) -> None:
        """Update advanced settings"""
        for key, value in kwargs.items():
            if hasattr(self.advanced_settings, key):
                setattr(self.advanced_settings, key, value)
        self.save_configuration()
    
    def get_setting(self, category: str, key: str) -> Any:
        """Get a specific setting value"""
        if category == 'user_preferences':
            return getattr(self.user_preferences, key, None)
        elif category == 'template_settings':
            return getattr(self.template_settings, key, None)
        elif category == 'advanced_settings':
            return getattr(self.advanced_settings, key, None)
        return None
    
    def set_setting(self, category: str, key: str, value: Any) -> None:
        """Set a specific setting value"""
        if category == 'user_preferences':
            if hasattr(self.user_preferences, key):
                setattr(self.user_preferences, key, value)
        elif category == 'template_settings':
            if hasattr(self.template_settings, key):
                setattr(self.template_settings, key, value)
        elif category == 'advanced_settings':
            if hasattr(self.advanced_settings, key):
                setattr(self.advanced_settings, key, value)
        self.save_configuration()
    
    def export_configuration(self, output_file: str) -> None:
        """Export configuration to a file"""
        config_data = {
            'user_preferences': asdict(self.user_preferences),
            'template_settings': asdict(self.template_settings),
            'advanced_settings': asdict(self.advanced_settings),
            'export_date': datetime.now().isoformat(),
            'version': '1.0'
        }
        
        with open(output_file, 'w') as f:
            json.dump(config_data, f, indent=2)
    
    def import_configuration(self, input_file: str) -> None:
        """Import configuration from a file"""
        with open(input_file, 'r') as f:
            data = json.load(f)
        
        # Update settings from imported data
        if 'user_preferences' in data:
            for key, value in data['user_preferences'].items():
                if hasattr(self.user_preferences, key):
                    setattr(self.user_preferences, key, value)
        
        if 'template_settings' in data:
            for key, value in data['template_settings'].items():
                if hasattr(self.template_settings, key):
                    setattr(self.template_settings, key, value)
        
        if 'advanced_settings' in data:
            for key, value in data['advanced_settings'].items():
                if hasattr(self.advanced_settings, key):
                    setattr(self.advanced_settings, key, value)
        
        self.save_configuration()
    
    def reset_to_defaults(self) -> None:
        """Reset all settings to defaults"""
        self.user_preferences = UserPreferences()
        self.template_settings = TemplateSettings()
        self.advanced_settings = AdvancedSettings()
        self.save_configuration()
    
    def get_configuration_summary(self) -> Dict[str, Any]:
        """Get a summary of current configuration"""
        return {
            'user_preferences': asdict(self.user_preferences),
            'template_settings': asdict(self.template_settings),
            'advanced_settings': asdict(self.advanced_settings),
            'config_file': str(self.config_file),
            'last_updated': datetime.now().isoformat()
        }
    
    def validate_configuration(self) -> List[str]:
        """Validate configuration settings"""
        issues = []
        
        # Validate user preferences
        if self.user_preferences.max_rules_per_batch <= 0:
            issues.append("max_rules_per_batch must be positive")
        
        # Validate template settings
        if not self.template_settings.company_name:
            issues.append("company_name cannot be empty")
        
        if not self.template_settings.contact_email or '@' not in self.template_settings.contact_email:
            issues.append("contact_email must be a valid email address")
        
        # Validate advanced settings
        if self.advanced_settings.confidence_threshold < 0 or self.advanced_settings.confidence_threshold > 1:
            issues.append("confidence_threshold must be between 0 and 1")
        
        if self.advanced_settings.categorization_confidence < 0 or self.advanced_settings.categorization_confidence > 1:
            issues.append("categorization_confidence must be between 0 and 1")
        
        if self.advanced_settings.similarity_threshold < 0 or self.advanced_settings.similarity_threshold > 1:
            issues.append("similarity_threshold must be between 0 and 1")
        
        return issues 